@page "/signin"
@rendermode InteractiveServer
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations

<EditForm Model="@signInModel" OnValidSubmit="HandleSignIn" FormName="signin">
    <DataAnnotationsValidator />
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="card shadow-lg p-4" style="width: 22rem;">
            <h4 class="card-title text-center mb-4">Sign In</h4>

            <div class="form-group mb-3">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="signInModel.Email" />
                <ValidationMessage For="@(() => signInModel.Email)" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="signInModel.Password" />
                <ValidationMessage For="@(() => signInModel.Password)" />
            </div>

            <div class="form-group d-grid">
                <button class="btn btn-primary" type="submit">Sign In</button>
            </div>

            <div class="mt-3 text-center">
                <small>Don't have an account? <a href="/signup">Sign Up</a></small>
            </div>
        </div>
    </div>
</EditForm>
@if (errorMessage != null)
{
    <div class="alert alert-danger text-center mt-3">@errorMessage</div>
}


@code {
    private SignInModel signInModel = new();
    private string? errorMessage;

    private async void HandleSignIn()
    {
        // TODO: Handle authentication logic here
        Console.WriteLine($"Welcome, {signInModel.Email}!");
        try
        {
            var response = await Http.PostAsJsonAsync("http://127.0.0.1:8000/api/login", signInModel);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Signed in successfully!");
                // TODO: Redirect or update UI accordingly
            }
            else
            {
                errorMessage = "Invalid credentials. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Something went wrong: {ex.Message}";
        }

    }

    private class SignInModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;
    }
}
